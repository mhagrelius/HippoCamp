name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened, edited]

permissions:
  contents: read
  pull-requests: read

jobs:
  conventional-commits:
    name: Validate Conventional Commits
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Conventional Commitlint
      uses: opensource-nepal/commitlint@v1
      with:
        fail_on_error: true
        verbose: true

  branch-naming:
    name: Validate Branch Naming
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    
    - name: Validate Git-Flow Branch Name
      uses: KinsonDigital/BranchValidator@v1.0.0-preview.4
      with:
        branch-name: ${{ github.head_ref }}
        validation-logic: "equalTo('feature/*') || equalTo('feat/*') || equalTo('bugfix/*') || equalTo('fix/*') || equalTo('hotfix/*') || equalTo('develop')"
        fail-when-not-valid: true

  git-flow-validation:
    name: Validate Git-Flow Rules
    runs-on: ubuntu-latest
    steps:
    - name: Check Branch Strategy Compliance
      run: |
        echo "🔍 Validating Git-Flow compliance..."
        echo "Source branch: ${{ github.head_ref }}"
        echo "Target branch: ${{ github.base_ref }}"
        
        # Block direct PRs to main (should come from develop)
        if [[ "${{ github.base_ref }}" == "main" && "${{ github.head_ref }}" != "develop" ]]; then
          echo "❌ Direct PRs to 'main' are not allowed!"
          echo "💡 Follow git-flow: merge to 'develop' first, then create release PR from 'develop' to 'main'"
          exit 1
        fi
        
        echo "✅ Git-flow branch strategy is valid"

  merge-strategy-guidance:
    name: Merge Strategy Guidance
    runs-on: ubuntu-latest
    steps:
    - name: Provide Merge Strategy Recommendations
      run: |
        echo "## 🔄 Merge Strategy Guidance" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: \`${{ github.head_ref }}\` → \`${{ github.base_ref }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.base_ref }}" == "develop" ]]; then
          echo "### 🔄 Use \"Squash and merge\"" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Keeps develop history clean" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Combines all feature commits into one" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Makes git log more readable" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ github.base_ref }}" == "main" ]]; then
          echo "### 🔀 Use \"Create a merge commit\"" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Preserves develop branch history" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Shows release boundaries clearly" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Makes releases easy to track" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Pre-merge Checklist" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] All commits follow conventional format" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Branch name follows git-flow convention" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] Correct merge strategy selected" >> $GITHUB_STEP_SUMMARY
        echo "- [ ] No secrets or credentials committed" >> $GITHUB_STEP_SUMMARY

  clean-history-check:
    name: Check for Merge Commits in PR
    runs-on: ubuntu-latest
    if: github.base_ref == 'develop'
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Forbid Merge Commits in Feature Branches
      uses: motlin/forbid-merge-commits-action@main
      with:
        fail-on-merge-commits: 'true'
        fail-notice: 'Feature branches should have clean history. Use rebase instead of merge to update your branch. See: https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/working-with-forks/syncing-a-fork'
